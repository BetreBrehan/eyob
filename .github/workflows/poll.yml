name: Poll Order Book & Push to Google Drive (every 5 minutes)

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  poll_and_upload:
    runs-on: ubuntu-24.04

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Restore GCP service account key
        run: |
          echo "${{ secrets.GCP_SA_KEY2 }}" > sa-key.json

      # If you still want to use your pre‑generated token.pickle as a fallback,
      # do the check in-shell so we don’t reference `secrets` in `if:`:
      - name: Restore token.pickle (optional fallback)
        run: |
          # Pull the raw secret and strip all CR/LF so base64 sees a single continuous blob
          RAW="${{ secrets.GDRIVE_TOKEN_B64_LO }}"
          TOKEN_B64="$(printf '%s' "$RAW" | tr -d '\r\n')"
          if [ -n "$TOKEN_B64" ]; then
            printf '%s' "$TOKEN_B64" | base64 -d > token.pickle
          fi

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ccxt google-api-python-client google-auth-httplib2 google-auth-oauthlib

      - name: Poll orderbook and sync with Google Drive
        env:
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
          # service‐account JSON will be auto‐picked up by the client library:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.workspace }}/sa-key.json
        run: python poll_and_sync.py
