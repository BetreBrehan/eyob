name: Poll Order Book & Push to Google Drive (every 5 minutes)

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      auth:
        description: "Which auth to use in this run: 'sa' (service account) or 'token' (user token)"
        required: false
        default: 'sa'
        type: choice
        options:
          - sa
          - token

jobs:
  poll_and_upload:
    runs-on: ubuntu-24.04

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Restore GCP service account key
        env:
          SA_KEY: ${{ secrets.GCP_SA_KEY2 }}
        run: |
          # If SA_KEY is empty, we leave it for the token fallback.
          if [ -z "$SA_KEY" ]; then
            echo "No service account key in secrets; continuing (token fallback possible)"
            exit 0
          fi
          # Write the SA key safely to the workspace (preserves newlines)
          printf '%s' "$SA_KEY" > "$GITHUB_WORKSPACE/sa-key.json"
          echo "Wrote sa-key.json (size: $(wc -c < "$GITHUB_WORKSPACE/sa-key.json")) bytes"

      - name: Show service-account identity (debug)
        run: |
          python - <<'PY'
import json, os, sys
p = os.path.join(os.environ.get('GITHUB_WORKSPACE','.'), 'sa-key.json')
if os.path.isfile(p):
    j = json.load(open(p))
    print("service account client_email:", j.get("client_email"))
else:
    print("sa-key.json not found; will use token.pickle fallback if provided")
PY

      - name: Restore token.pickle (run only when dispatch input auth=token)
        if: ${{ github.event.inputs.auth == 'token' }}
        env:
          TOKEN_B64: ${{ secrets.GDRIVE_NEW }}
        run: |
          if [ -z "$TOKEN_B64" ]; then
            echo "No token secret provided; failing early" >&2
            exit 1
          fi
          printf '%s' "$TOKEN_B64" | base64 --decode > token.pickle
          echo "Restored token.pickle size: $(wc -c < token.pickle) bytes"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ccxt google-api-python-client google-auth-httplib2 google-auth-oauthlib

      - name: Poll orderbook and sync with Google Drive
        env:
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.workspace }}/sa-key.json
        run: python poll_and_sync.py
